package oracleRestClient

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type OracleTokenRequest struct {
	Aouthurl     string `json:"aouthurl"`
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

type OraclePostRequest struct {
	AccessUrl  string
	Oauthtoken string
}

func GetOracleDBtoken(tr OracleTokenRequest) (string, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl
	// --user K04P-iGbYvqLWrGeJMy_Qg..:UUXE71CDaj3mf0c3KBsltw..
	// --data 'grant_type=client_credentials'
	// https://h4de06bp7uxfolh-db202110152122.adb.eu-frankfurt-1.oraclecloudapps.com/ords/hr/oauth/token
	//

	type Oauthresponse struct {
		Access_token string `json:"access_token"`
		Token_type   string `json:"token_type"`
		Expires_in   int32  `json:"expires_in"`
	}

	r1 := Oauthresponse{}

	params := url.Values{}
	params.Add("grant_type", `client_credentials`)
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", tr.Aouthurl, body)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	req.SetBasicAuth(tr.ClientID, tr.ClientSecret)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	defer resp.Body.Close()

	bodyR, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return "", err
	}

	err = json.Unmarshal(bodyR, &r1)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	//fmt.Println("Bearer " + r1.Access_token)
	return "Bearer " + r1.Access_token, nil
}
