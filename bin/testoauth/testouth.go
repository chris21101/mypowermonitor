package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type TokenRequest struct {
	Aouthurl     string `json:"aouthurl"`
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

type OraclePostRequest struct {
	accessUrl  string
	oauthtoken string
}

//{"empno":7788,"ename":"SCOTT","job":"ANALYST","mgr":7566,"hiredate":"1987-04-19T00:00:00Z","sal":3000,"comm":null,"deptno":20}

type OracleRespEmp struct {
	Empno    int     `json:"empno"`
	Ename    string  `json:"ename"`
	Job      string  `json:"job"`
	Mgr      string  `json:"mgr"`
	Hiredate string  `json:"hiredate"`
	Sal      float64 `json:"sal"`
	Comm     float64 `json:"comm"`
	Deptno   int     `json:"deptno"`
}

func getOracleDBtoken(tr TokenRequest) (string, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl
	// --user K04P-iGbYvqLWrGeJMy_Qg..:UUXE71CDaj3mf0c3KBsltw..
	// --data 'grant_type=client_credentials'
	// https://h4de06bp7uxfolh-db202110152122.adb.eu-frankfurt-1.oraclecloudapps.com/ords/hr/oauth/token
	//

	type Oauthresponse struct {
		Access_token string `json:"access_token"`
		Token_type   string `json:"token_type"`
		Expires_in   int32  `json:"expires_in"`
	}

	r1 := Oauthresponse{}

	params := url.Values{}
	params.Add("grant_type", `client_credentials`)
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", tr.Aouthurl, body)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	req.SetBasicAuth(tr.ClientID, tr.ClientSecret)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	defer resp.Body.Close()

	bodyR, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return "", err
	}

	err = json.Unmarshal(bodyR, &r1)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	return "Bearer " + r1.Access_token, nil
}

func getTimeStr() string {
	t := time.Now()

	formTimestamp := fmt.Sprintf("%d-%02d-%02dT%02d:%02d:%02d",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())
	return formTimestamp
}

func main() {
	newTokenRequest := TokenRequest{
		Aouthurl:     "https://h4de06bp7uxfolh-db202110152122.adb.eu-frankfurt-1.oraclecloudapps.com/ords/hr/oauth/token",
		ClientID:     "K04P-iGbYvqLWrGeJMy_Qg..",
		ClientSecret: "UUXE71CDaj3mf0c3KBsltw.."}

	newOracleRequest := OraclePostRequest{
		accessUrl:  "https://h4de06bp7uxfolh-db202110152122.adb.eu-frankfurt-1.oraclecloudapps.com/ords/hr/employees/7788",
		oauthtoken: "q41cYvvrtkgHXKaRtsEiTA",
	}

	for {
		// When starting we need a token
		if newOracleRequest.oauthtoken == "" {
			newtoken, err := getOracleDBtoken(newTokenRequest)
			if err != nil {
				log.Fatal(err)
			}
			fmt.Printf("%s - %s\n", getTimeStr(), newtoken)
			newOracleRequest.oauthtoken = newtoken
		}

		// Now the post request
		var oracResp OracleRespEmp

		client := &http.Client{
			Timeout: 5 * time.Second,
		}

		req, err := http.NewRequest(http.MethodGet, newOracleRequest.accessUrl, http.NoBody)
		req.Close = true

		if err != nil {
			fmt.Printf("%s - %s\n", getTimeStr(), err)
		}

		req.Header.Set("Authorization", newOracleRequest.oauthtoken)
		res, err := client.Do(req)

		if err != nil {
			fmt.Printf("%s - %s\n", getTimeStr(), err)
		}
		fmt.Printf("%s - %s\n", getTimeStr(), res.Status)
		if res.StatusCode == 401 {
			newtoken, err := getOracleDBtoken(newTokenRequest)
			if err != nil {
				log.Fatal(err)
			}
			fmt.Printf("%s - %s\n", getTimeStr(), newtoken)
			newOracleRequest.oauthtoken = newtoken
		} else {
			body, _ := ioutil.ReadAll(res.Body)
			json.Unmarshal(body, &oracResp)
			jstring, _ := json.Marshal(oracResp)
			fmt.Printf("%s - %s\n", getTimeStr(), jstring)
		}
		time.Sleep(time.Duration(60) * time.Second)
	}
}
